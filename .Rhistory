getwd()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off
dev.off)
dev.off()
dev.cur()
with(faithful, plot(eruptions,
| waiting))
with(faithful, plot(eruptions,waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file = "geyserplot.png")
dev.off()
subject <- c(1,2,3,4,5)
baseline <- c(140,138,150,148,135)
week <- c(132,135,151,146,130)
test <- data.frame(subject, baseline, week)
t <- t.test(x = test$baseline,y= test$week, alt ="two.sided", paired = TRUE)
t$p.value
confidenceInterval = 1100 + c(-1,1)*qt(0.975, 8)*30/3
test <- binom.test(3,4 alt ="greater")
test <- binom.test(x=3,n=4 alt="greater")
test <- binom.test(x=3,n=4 alternative="greater")
test <- binom.test(x=3,n=4, alternative ="greater")
test$p.value
test <- t.test(x=10,y=1787,alt ="one.sided")
test < - poisson.test(10,T =1787, r = 0.1, alt = "less")
test < - poisson.test(10,T =1787, r = 00.1, alt = "less")
test < - poisson.test(10,T =1787, r = 0.01, alt = "less")
test <- poisson.test(10,T = 1787, r = 0.01, alt = "less")
test$p.value
load(mtcars)
data(mtcars)
dim(mtcars)
head(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
attach(mtcars)
head(mtcars)
mtcars$am <- factor(mtcars$am)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
head(mtcars)
library(ggplot2)
result <- t.test(mpg ~ am)
result$p.value
result$estimate
mtcars$cyl <- as.factor(mtcars$cyl)
mtcars$vs <- as.factor(mtcars$vs)
mtcars$am <- as.factor(mtcars$am)
mtcars$gear <- as.factor(mtcars$gear)
mtcars$carb <- as.factor(mtcars$carb)
result <- t.test(mpg ~ am)
result$p.value
result$estimate
result <- t.test(mtcars$mpg ~ mtcars$am)
result
result$p.value
result$estimate
head(mtcars)
result$estimate[0]
result$estimate
result$estimate[1]
result$estimate[2]
result$estimate[2] -  result$estimate[1]
result$estimate[:2] -  result$estimate[1]
result$estimate[1,2] -  result$estimate[1]
result$estimate[1,2] -  result$estimate[1,1]
result$estimate[1,2]
result$estimate[,2]
result$estimate[2]
fullModel <- lm(mtcars$mpg ~ .)
fullModel <- lm(mtcars$mpg ~ ., data = mtcars)
head(fullModel)
summary(fullModel)
step(fullModel, k=log(nrow(mtcars)))
k=log(nrow(mtcars))
stepModel = step(fullModel, k=log(nrow(mtcars)))
stepModel <- step(fullModel, k=log(nrow(mtcars)))
head(stepModel)
nrow(mtcars)
?step
summary(fullModel)
summary(stepModel)
?lm
?steo
?step
fullModel <- lm(mpg ~ ., data = mtcars)
stepModel_2 <- lm(mpg ~ wt + qsec + am + wt:am, data = mtcars)
summary(stepModel_2)
simpleModel <- lm(mpg ~ am, data = mtcars)
summary(simpleModel)
?anova
anova(simpleModel,stepModel_2,stepModel, fullModel)
anova(simpleModel,stepModel_2,fullModel,stepModel)
fullModel <- lm(mpg ~ ., data = mtcars)
stepModel <- step(fullModel, k=log(nrow(mtcars)))
stepModel_2 <- lm(mpg ~ wt + qsec + am + wt:am, data = mtcars)
simpleModel <- lm(mpg ~ am, data = mtcars)
anova(simpleModel,stepModel_2,fullModel,stepModel)
anova(simpleModel,stepModel,stepModel_2,fullModel)
confint(stepModel_2)
confint(stepModel)
confint(fullModel)
confint(simpleModel)
mtcars$wt
mtcars$am
mtcars$am:mtcars$wt
mtcars$(wt:am)
mtcars$wt:am
mtcars$wt:mtcars$am
wt:am
wt <- mtcars$wt
am <- mtcars$am
wt:Am
wt:am
am:wt
stepModel_2 <- lm(mpg ~ wt + qsec + am + wt:am, data = mtcars)
stepModel_2 <- lm(mpg ~ wt + qsec + am + am:wt, data = mtcars)
summary(stepModel_2)
summary(stepModel_2)$coef
stepModel_2 <- lm(mpg ~ wt + qsec + am + am:wt, data = mtcars)
summary(stepModel_2)$coef
stepModel
summary(stepModel)
result <- t.test(mtcars$mpg ~ mtcars$am)
result
library(ggplot2)
par(mfrow = c(2,2))
plot(stepModel_2)
boxplot(mpg ~ am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
boxplot(mtcars$mpg ~ mtcars$am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
fig_height: 7
fig_width: 7
par(mar = rep(2,4))
boxplot(mtcars$mpg ~ mtcars$am, xlab="Transmission (0 = Automatic, 1 = Manual)", ylab="MPG",
main="Boxplot of MPG vs. Transmission")
plot(stepModel_2)
par(mfow=c(2,2))
par(mfrow=c(2,2))
plot(stepModel_2)
?dfbetas
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
p.test(x,y)
t.test(x,y)
lm(y~x)
summary(lm(y~x))
x<-[2,-1,2,0.5]
x<-c(2,-1,2,0.5)
y<-c(1.5,2,-1,-2.5)
summary(lm(y~x))
lm(mtcars$mpg ~ mtcars$weight)
summary(lm(mtcars$mpg ~ mtcars$wt))
t.test(mtcars$mpg ~ mtcars$wt)
t.test(mtcars$mpg , mtcars$wt)
fit<-lm(mtcars$mpg ~ mtcars$wt)
predict(fit, data.frame(x = mean(x)), interval = "confidence")
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(x=3), interval="prediction")
predict(fit,data.frame(matcars$wt=3), interval="prediction")
predict(fit,data.frame(mtcars$wt=3), interval="prediction")
x = mtcars$wt
y = mtcars$mpg
predict(fit,data.frame(x=3), interval="prediction")
fit<-lm(y ~ x)
predict(fit,data.frame(x=3), interval="prediction")
predict(fit,data.frame(x=mean(x)), interval="prediction")
predict(fit,data.frame(x=mean(x)), interval="confidence")
predict(fit,data.frame(x=-2), interval="confidence")
fit2<-lm(y~I(x/2))
summary(fit2)
qt(0.975,df = 30)
1.118*2.042272*c(-1,1)+-10.689
summary(fit)$coefficients
fit_3<- lm(y~I(x/100))
summary(fit_3)$coefficients
fit_4<- lm(y~I(x+10))
summary(fit_4)$coefficients
summary(lm(y~x))$coefficients
37.285126-(-5.344472 )*10
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
version
file:///C:/Program Files/R/R-3.2.2/library/graphics
file:///C:/Program Files/R/R-3.2.2/library/grDevices
file:///C:/Program Files/R/R-3.2.2/library/methods
file:///C:/Program Files/R/R-3.2.2/library/stats
file:///C:/Program Files/R/R-3.2.2/library/tools
file:///C:/Program Files/R/R-3.2.2/library/utils
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
install.packages("ggplot2")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex,]
testing = adData[trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
header(training)
head(training)
summary(training)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
training
head(taining)
head(training)
head(testing)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
IL <- grep("^IL", colnames(training), value = TRUE)
ILpredicators <- predictors(IL)
df <- data.frame(diagnosis, ILpredictors)
df <- data.frame(diagnosis, ILpredicators)
inTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print (C1)
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
acc1 <- C1$overall[1]
ILpredictors <- predictors[, IL]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
install.packages("e1071")
set.seed(3433)
IL <- grep("^IL", colnames(training), value=TRUE)
ILpredictors <- predictors[, IL]
df <- data.frame(diagnosis, ILpredictors)
inTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method="glm", data=training)
predictions <- predict(modelFit, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
C1
acc1 <- C1$overall[1]
acc1
ss <- training[,grep('^IL', x = names(training) )]
ss
pre<-preProcess(ss,method = 'pca', thresh = 0.9, outcome = training$diagnosis)
pre$rotation
pre<-preProcess(ss,method = 'pca', thresh = 0.8, outcome = training$diagnosis)
pre$rotation
install.packages("natbib")
install.packages("mathspec")
.libPaths()
.libPaths( c( .libPaths(), "~/userLibrary") )
.libPaths()
install.packages("mathspec")
.libPaths()
.libPaths()[1]
.libPaths()[2]
.libPaths( c( .libPaths()[2]) )
.libPaths()
.libPaths()
install.packages("mathspec")
install.packages("fancyvrb.sty")
install.packages("fancyvrb")
setRepositories()
install.packages("fancyvrb")
library(installr)
install.packages("installr")
library(installr)
updateR()
install.packages("fancyvrb")
install.packages("mathspec")
install.packages("knitr")
install.packages("markdown")
.libPaths()
.libPaths()
install.packages("knitr")
install.packages("markdown")
.libPaths()
data(mtcars)
head(mtcars)
mtcars$cyl <- as.factor(mtcars$cyl)
ste <- lm(mpg ~ cyl, data = mtcars)
summary(ste)
ste <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(ste)
ste <- lm(mpg ~ factor(cyl), data = mtcars)
summary(ste)
fit <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
lm(y~x)
hatvalues(lm(y~x))
?hatvalues
hv <- as.data.frame(hatvalues(lm(y~x)))
hv
mean(hatvalues(lm(y~x)))
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
dfbetas(lm(y~x))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("AppliedPredictiveModeling")
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
install.packages("ggplot2")
install.packages("ggplot2")
.libPaths()
install.packages("lattice")
install.packages("mgcv")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
install.packages("rmethod")
install.packages("rpart")
install.packages("rpart")
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
?train
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
install.packages('e1071', dependencies=TRUE)
data <- segmentationOriginal
set.seed(125)
inTrain <- data$Case == "Train"
trainData <- data[inTrain, ]
testData <- data[!inTrain, ]
cartModel <- train(Class ~ ., data=trainData, method="rpart")
cartModel$finalModel
plot(cartModel$finalModel, uniform=T)
text(cartModel$finalModel, cex=0.8)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
treeModel <- train(Area ~ ., data=olive, method="rpart2")
treeModel
newdata <- as.data.frame(t(colMeans(olive)))
predict(treeModel,newdata)
install.packages("ElemStatLearn")
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
logitModel <- train(chd ~ age + alcohol + obesity + tobacco +
typea + ldl, data=trainSA, method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass()
missClass
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
predictTrain <- predict(logitModel, trainSA)
predictTest <- predict(logitModel, testSA)
missClass(trainSA$chd, predictTrain)
missClass(testSA$chd, predictTest)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modelRF<-randomForest(y~.,data= vowel.train, importance = FALSE)
modelRF<- randomForest(y~.,data= vowel.train, importance = FALSE)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
ls(package:randomForest)
install.packages("randomForest")
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
ls(package:randomForest)
?randomForest
ls(package:randomForest)
?randomForest
ls(package:randomForest)
?randomForest
library(randomForest)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelRf), decreasing=T)
modelRf <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
?varImp
library("swirl")
swirl()
getwd
getwd()
setwd("~R\Coursera\Practical Machine Learning")
setwd("~\R\Coursera\Practical Machine Learning")
setwd("~/R/Coursera/Practical Machine Learning")
getwd()
traindata <- read.csv("./raw_data/pml-training.csv")
testdata <- read.csv("./raw_data/pml-testing.csv")
sum(complete.cases(traindata))
traindata[, colSums(is.na(traindata)) == 0]
traindata <- traindata[, colSums(is.na(traindata)) == 0]
testdata <- testdata[, colSums(is.na(testdata)) == 0]
is.na(testdata)
testdata <- read.csv("./raw_data/pml-testing.csv")
colSums(is.na(testdata)) == 0
is.na(testdata)
colSums(is.na(testdata))
testdata <- testdata[, colSums(is.na(testdata)) == 0]
?classe
testdata$class
testdata$classe
head(traindata)
traindata <- traindata[,!grepl("^X|timestamp|window", names(traindata))]
classe <- traindata$classe
traindata <- traindata[, sapply(traindata, is.numeric)]
traindata$classe <- classe
head(traindata)
testdata <- testdata[,!grepl("^X|timestamp|window", names(testdata))]
testdata <- testdata[, sapply(testdata, is.numeric)]
head(testdata)
colnames(testdata)
col_2 <- colnames(traindata)
col_1 <- colnames(testdata)
col_1 = col_2
col_1 == col_2
col_1
col_2
col_2 <- colnames(traindata) col_1 <- colnames(testdata)
col_2 <- colnames(traindata)
col_1 <- colnames(testdata)
col_2 == col_1
col_2
col_1
